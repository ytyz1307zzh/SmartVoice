import subprocess
import threading
import queue
import time

# 运行ASR的线程函数
def run_asr(asr_command, output_queue):
    process = subprocess.Popen(
        asr_command,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        universal_newlines=True,
        bufsize=1
    )

    for line in iter(process.stdout.readline, ''):
        line = line.strip()
        if line:
            output_queue.put(line)

    process.stdout.close()
    process.wait()

# 假设的LLM调用函数
def query_llm(text):
    # 替换此处为你实际调用LLM的API代码
    print(f"[LLM输入]: {text}")
    response = "LLM response placeholder"
    print(f"[LLM输出]: {response}")
    return response

def main():
    asr_command = [
        "./stream",
        "-m", "models/ggml-tiny.en.bin",
        "--step", "4000",
        "--length", "8000",
        "-c", "0",
        "-t", "4",
        "-ac", "512"
    ]

    output_queue = queue.Queue()

    asr_thread = threading.Thread(target=run_asr, args=(asr_command, output_queue))
    asr_thread.daemon = True  # 设置为守护线程，方便主进程结束时自动停止
    asr_thread.start()

    print("ASR进程已启动，等待输入...")

    try:
        while True:
            if not output_queue.empty():
                asr_output = output_queue.get()
                print(f"[ASR输出]: {asr_output}")

                llm_response = query_llm(asr_output)

            else:
                time.sleep(0.1)

    except KeyboardInterrupt:
        print("\n用户中断程序，正在关闭ASR和LLM。")

if __name__ == "__main__":
    main()
